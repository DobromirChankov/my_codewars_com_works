# Split Strings 

# Complete the solution so that it splits the string into pairs of two characters. 
# If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_').

# Examples:

# * 'abc' =>  ['ab', 'c_']
# * 'abcdef' => ['ab', 'cd', 'ef']
# -----------------------------------------------------------------
# My Solution:

def solution(s):
    res_list =[]
    if len(s) == 0:
        return res_list
    elif len(s) == 1:
        return [s[0] + '_']
    elif len(s) > 1:
        for i in range(0, len(s), 2):
            if i+1 < len(s):
                res_list.append(s[i] + s[i+1])
            else:    
                res_list.append(s[i] + '_')
        return res_list     


# -------------------------------------------------------------------
test.describe("Basic Tests")

tests = (
    ("asdfadsf", ['as', 'df', 'ad', 'sf']),
    ("asdfads", ['as', 'df', 'ad', 's_']),
    ("", []),
    ("x", ["x_"]),
)

for inp, exp in tests:
    test.assert_equals(solution(inp), exp)
   
test.describe("Random Tests")

from random import randint, choice
from string import ascii_lowercase

reference = lambda s, n=2: [''.join(e) for e in zip(*[iter(s + ['', '_'][len(s) % 2])]*2)]

for _ in range(100):
    test_case = "".join(choice(ascii_lowercase) for _ in range(randint(0, 100)))
    test.assert_equals(solution(test_case), reference(test_case))
